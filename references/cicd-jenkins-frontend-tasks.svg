<svg width="1200" height="1400" xmlns="http://www.w3.org/2000/svg">
  <defs>
    <style>
      .title { font: bold 18px Arial; text-anchor: middle; fill: #2c3e50; }
      .phase { font: bold 14px Arial; text-anchor: middle; fill: #ffffff; }
      .step { font: 12px Arial; text-anchor: middle; fill: #2c3e50; }
      .detail { font: 10px Arial; fill: #555; }
      .phase-bg { fill: #e74c3c; stroke: #c0392b; stroke-width: 2; }
      .step-bg { fill: #ecf0f1; stroke: #bdc3c7; stroke-width: 1; }
      .decision-bg { fill: #f39c12; stroke: #e67e22; stroke-width: 2; }
      .success-bg { fill: #27ae60; stroke: #229954; stroke-width: 2; }
      .arrow { stroke: #2c3e50; stroke-width: 2; fill: #2c3e50; }
      .connector-line { stroke: #2c3e50; stroke-width: 2; fill: none; }
    </style>
    <marker id="arrowhead" markerWidth="10" markerHeight="7" refX="10" refY="3.5" orient="auto">
      <polygon points="0 0, 10 3.5, 0 7" class="arrow"/>
    </marker>
  </defs>

  <!-- Title -->
  <text x="600" y="30" class="title">프론트엔드 Jenkins CI/CD 자동화 구축 작업 단계</text>

  <!-- Phase 1: 사전 작업 -->
  <rect x="50" y="60" width="1100" height="40" rx="5" class="phase-bg"/>
  <text x="600" y="85" class="phase">1. 사전 작업</text>

  <!-- Step 1.1: 프로젝트 준비 -->
  <rect x="100" y="120" width="200" height="60" rx="5" class="step-bg"/>
  <text x="200" y="140" class="step">프로젝트 오픈</text>
  <text x="110" y="155" class="detail">VSCode로 프론트엔드 서비스 오픈</text>
  <text x="110" y="170" class="detail">프로젝트 구조 확인</text>

  <!-- Step 1.2: .dockerignore 작성 -->
  <rect x="350" y="120" width="250" height="60" rx="5" class="step-bg"/>
  <text x="475" y="140" class="step">.dockerignore 작성</text>
  <text x="360" y="155" class="detail">• 빌드 성능 최적화를 위한 제외 파일 정의</text>
  <text x="360" y="170" class="detail">• node_modules, build, .git 등 제외</text>

  <!-- Arrow 1.1 to 1.2 -->
  <line x1="300" y1="150" x2="350" y2="150" class="connector-line" marker-end="url(#arrowhead)"/>

  <!-- Phase 2: 품질 검사 도구 -->
  <rect x="50" y="200" width="1100" height="40" rx="5" class="phase-bg"/>
  <text x="600" y="225" class="phase">2. 품질 검사 도구 설정</text>

  <!-- Step 2.1: SonarQube 프로젝트 생성 -->
  <rect x="100" y="260" width="300" height="80" rx="5" class="step-bg"/>
  <text x="250" y="280" class="step">SonarQube 프로젝트 생성</text>
  <text x="110" y="295" class="detail">• 프론트엔드용 프로젝트 생성</text>
  <text x="110" y="310" class="detail">• 패턴: {서비스명}-{환경}</text>
  <text x="110" y="325" class="detail">• 예: phonebill-front-dev</text>

  <!-- Arrow 1.2 to 2.1 -->
  <line x1="475" y1="180" x2="475" y2="200" class="connector-line"/>
  <line x1="475" y1="200" x2="250" y2="200" class="connector-line"/>
  <line x1="250" y1="200" x2="250" y2="260" class="connector-line" marker-end="url(#arrowhead)"/>

  <!-- Phase 3: CI/CD 파일 생성 -->
  <rect x="50" y="360" width="1100" height="40" rx="5" class="phase-bg"/>
  <text x="600" y="385" class="phase">3. CI/CD 파일 생성</text>

  <!-- Step 3.1: Claude Code 실행 -->
  <rect x="100" y="420" width="200" height="60" rx="5" class="step-bg"/>
  <text x="200" y="440" class="step">Claude Code 실행</text>
  <text x="110" y="455" class="detail">VSCode에서 Claude Code 시작</text>
  <text x="110" y="470" class="detail">개발 도구 준비</text>

  <!-- Step 3.2: CI/CD 파일 생성 -->
  <rect x="350" y="420" width="280" height="60" rx="5" class="step-bg"/>
  <text x="490" y="440" class="step">CI/CD 파일 생성</text>
  <text x="360" y="455" class="detail">@cicd '프론트엔드Jenkins파이프라인작성가이드'</text>
  <text x="360" y="470" class="detail">deployment/cicd 디렉토리에 생성됨</text>

  <!-- Step 3.3: 파일 검토 및 수정 -->
  <rect x="680" y="420" width="200" height="60" rx="5" class="step-bg"/>
  <text x="780" y="440" class="step">파일 검토 및 수정</text>
  <text x="690" y="455" class="detail">생성된 파일 내용 검토</text>
  <text x="690" y="470" class="detail">필요시 수정 작업</text>

  <!-- Arrows for Phase 3 -->
  <line x1="250" y1="340" x2="250" y2="360" class="connector-line"/>
  <line x1="250" y1="360" x2="200" y2="360" class="connector-line"/>
  <line x1="200" y1="360" x2="200" y2="420" class="connector-line" marker-end="url(#arrowhead)"/>
  <line x1="300" y1="450" x2="350" y2="450" class="connector-line" marker-end="url(#arrowhead)"/>
  <line x1="630" y1="450" x2="680" y2="450" class="connector-line" marker-end="url(#arrowhead)"/>

  <!-- Step 3.4: Git Push -->
  <rect x="920" y="420" width="180" height="60" rx="5" class="step-bg"/>
  <text x="1010" y="440" class="step">Git Push</text>
  <text x="930" y="455" class="detail">로컬 변경사항 커밋</text>
  <text x="930" y="470" class="detail">원격 저장소 푸시</text>

  <!-- Arrow to Git Push -->
  <line x1="880" y1="450" x2="920" y2="450" class="connector-line" marker-end="url(#arrowhead)"/>

  <!-- Phase 4: Jenkins 설정 -->
  <rect x="50" y="500" width="1100" height="40" rx="5" class="phase-bg"/>
  <text x="600" y="525" class="phase">4. Jenkins 파이프라인 구성</text>

  <!-- Step 4.1: 새 Item 생성 -->
  <rect x="100" y="560" width="180" height="60" rx="5" class="step-bg"/>
  <text x="190" y="580" class="step">새 Item 생성</text>
  <text x="110" y="595" class="detail">'새로운 Item' 클릭</text>
  <text x="110" y="610" class="detail">Pipeline 카드 선택</text>

  <!-- Step 4.2: 파이프라인 설정 -->
  <rect x="320" y="560" width="200" height="60" rx="5" class="step-bg"/>
  <text x="420" y="580" class="step">파이프라인 설정</text>
  <text x="330" y="595" class="detail">프로파일명: {서비스명}</text>
  <text x="330" y="610" class="detail">예) phonebill-front</text>

  <!-- Step 4.3: WebHook 트리거 -->
  <rect x="560" y="560" width="200" height="60" rx="5" class="step-bg"/>
  <text x="660" y="580" class="step">WebHook 트리거</text>
  <text x="570" y="595" class="detail">GitHub hook trigger for</text>
  <text x="570" y="610" class="detail">GITScm polling 체크</text>

  <!-- Step 4.4: 매개변수 설정 -->
  <rect x="800" y="560" width="200" height="60" rx="5" class="step-bg"/>
  <text x="900" y="580" class="step">매개변수 설정</text>
  <text x="810" y="595" class="detail">ENVIRONMENT (dev/staging/prod)</text>
  <text x="810" y="610" class="detail">SKIP_SONARQUBE (true/false)</text>

  <!-- Arrows for Phase 4 -->
  <line x1="1010" y1="480" x2="1010" y2="500" class="connector-line"/>
  <line x1="1010" y1="500" x2="190" y2="500" class="connector-line"/>
  <line x1="190" y1="500" x2="190" y2="560" class="connector-line" marker-end="url(#arrowhead)"/>
  <line x1="280" y1="590" x2="320" y2="590" class="connector-line" marker-end="url(#arrowhead)"/>
  <line x1="520" y1="590" x2="560" y2="590" class="connector-line" marker-end="url(#arrowhead)"/>
  <line x1="760" y1="590" x2="800" y2="590" class="connector-line" marker-end="url(#arrowhead)"/>

  <!-- Step 4.5: Git Repository 설정 -->
  <rect x="100" y="640" width="250" height="80" rx="5" class="step-bg"/>
  <text x="225" y="660" class="step">Git Repository 설정</text>
  <text x="110" y="675" class="detail">• Repository URL: 원격 Git Repo 주소</text>
  <text x="110" y="690" class="detail">• Credentials: Git Repo 접속 인증</text>
  <text x="110" y="705" class="detail">• Branch: */main</text>

  <!-- Step 4.6: Jenkinsfile 경로 설정 -->
  <rect x="400" y="640" width="250" height="60" rx="5" class="step-bg"/>
  <text x="525" y="665" class="step">Jenkinsfile 경로 설정</text>
  <text x="410" y="680" class="detail">경로: deployment/cicd/Jenkinsfile</text>
  <text x="410" y="695" class="detail">스크립트 경로 정확히 입력</text>

  <!-- Arrows for additional Phase 4 steps -->
  <line x1="900" y1="620" x2="900" y2="630" class="connector-line"/>
  <line x1="900" y1="630" x2="225" y2="630" class="connector-line"/>
  <line x1="225" y1="630" x2="225" y2="640" class="connector-line" marker-end="url(#arrowhead)"/>
  <line x1="350" y1="670" x2="400" y2="670" class="connector-line" marker-end="url(#arrowhead)"/>

  <!-- Phase 5: 파이프라인 실행 -->
  <rect x="50" y="720" width="1100" height="40" rx="5" class="phase-bg"/>
  <text x="600" y="745" class="phase">5. 파이프라인 실행 및 검증</text>

  <!-- Step 5.1: K8s 객체 삭제 -->
  <rect x="100" y="780" width="180" height="80" rx="5" class="step-bg"/>
  <text x="190" y="800" class="step">K8s 객체 삭제</text>
  <text x="110" y="815" class="detail">kubectl delete -f</text>
  <text x="110" y="830" class="detail">deployment/k8s</text>
  <text x="110" y="845" class="detail">기존 배포 정리</text>

  <!-- Step 5.2: 파이프라인 실행 -->
  <rect x="320" y="780" width="180" height="60" rx="5" class="step-bg"/>
  <text x="410" y="800" class="step">파이프라인 실행</text>
  <text x="330" y="815" class="detail">수동 빌드 트리거</text>
  <text x="330" y="830" class="detail">진행 상황 모니터링</text>

  <!-- Decision: 빌드 성공? -->
  <polygon points="600,780 680,810 600,840 520,810" class="decision-bg"/>
  <text x="600" y="815" class="step">빌드 성공?</text>

  <!-- Step 5.3: 트러블슈팅 (실패 시) -->
  <rect x="350" y="880" width="220" height="100" rx="5" class="step-bg"/>
  <text x="460" y="900" class="step">트러블슈팅</text>
  <text x="360" y="915" class="detail">• 에러 메시지 복사</text>
  <text x="360" y="930" class="detail">• Claude Code에 해결 요청</text>
  <text x="360" y="945" class="detail">• 로컬 수정 후 push</text>
  <text x="360" y="960" class="detail">• 파이프라인 재실행</text>

  <!-- Step 5.4: 빌드 성공 확인 -->
  <rect x="750" y="880" width="180" height="60" rx="5" class="success-bg"/>
  <text x="840" y="905" class="step" fill="white">빌드 성공 확인</text>
  <text x="760" y="920" class="detail" fill="white">성공적인 배포 검증</text>
  <text x="760" y="935" class="detail" fill="white">프론트엔드 서비스 준비</text>

  <!-- Arrows for Phase 5 -->
  <line x1="525" y1="700" x2="525" y2="720" class="connector-line"/>
  <line x1="525" y1="720" x2="190" y2="720" class="connector-line"/>
  <line x1="190" y1="720" x2="190" y2="780" class="connector-line" marker-end="url(#arrowhead)"/>
  <line x1="280" y1="820" x2="320" y2="820" class="connector-line" marker-end="url(#arrowhead)"/>
  <line x1="500" y1="810" x2="520" y2="810" class="connector-line" marker-end="url(#arrowhead)"/>

  <!-- Decision arrows -->
  <line x1="580" y1="830" x2="460" y2="880" class="connector-line" marker-end="url(#arrowhead)"/>
  <text x="510" y="860" class="detail" fill="#e74c3c">실패</text>
  <line x1="620" y1="830" x2="840" y2="880" class="connector-line" marker-end="url(#arrowhead)"/>
  <text x="720" y="860" class="detail" fill="#27ae60">성공</text>

  <!-- Loop back from troubleshooting -->
  <path d="M 350 930 Q 280 930 280 870 Q 280 810 300 810" class="connector-line" marker-end="url(#arrowhead)"/>

  <!-- Phase 6: 자동화 설정 -->
  <rect x="50" y="1000" width="1100" height="40" rx="5" class="phase-bg"/>
  <text x="600" y="1025" class="phase">6. 자동화 설정 및 완료</text>

  <!-- Step 6.1: WebHook 설정 -->
  <rect x="200" y="1060" width="250" height="80" rx="5" class="step-bg"/>
  <text x="325" y="1080" class="step">GitHub WebHook 설정</text>
  <text x="210" y="1095" class="detail">• Repository Settings → WebHooks</text>
  <text x="210" y="1110" class="detail">• Payload URL: http://{Jenkins IP}/github-webhook/</text>
  <text x="210" y="1125" class="detail">• Content-Type: application/json</text>

  <!-- Step 6.2: 자동화 테스트 -->
  <rect x="500" y="1060" width="250" height="80" rx="5" class="success-bg"/>
  <text x="625" y="1080" class="step" fill="white">자동화 테스트</text>
  <text x="510" y="1095" class="detail" fill="white">• 소스 변경 후 자동 빌드 확인</text>
  <text x="510" y="1110" class="detail" fill="white">• git commit → push → 자동 빌드</text>
  <text x="510" y="1125" class="detail" fill="white">• 프론트엔드 CI/CD 파이프라인 완성</text>

  <!-- Final arrows -->
  <line x1="840" y1="940" x2="840" y2="1000" class="connector-line"/>
  <line x1="840" y1="1000" x2="325" y2="1000" class="connector-line"/>
  <line x1="325" y1="1000" x2="325" y2="1060" class="connector-line" marker-end="url(#arrowhead)"/>
  <line x1="450" y1="1100" x2="500" y2="1100" class="connector-line" marker-end="url(#arrowhead)"/>

  <!-- Success indicator -->
  <circle cx="625" cy="1180" r="20" class="success-bg"/>
  <text x="625" y="1185" class="step" fill="white">완료</text>
  <line x1="625" y1="1140" x2="625" y2="1160" class="connector-line" marker-end="url(#arrowhead)"/>

  <!-- Legend -->
  <rect x="50" y="1220" width="300" height="120" rx="5" fill="none" stroke="#bdc3c7" stroke-width="1"/>
  <text x="200" y="1240" class="step">범례</text>
  <rect x="70" y="1250" width="15" height="15" class="phase-bg"/>
  <text x="95" y="1262" class="detail">주요 단계 (Phase)</text>
  <rect x="70" y="1265" width="15" height="15" class="step-bg"/>
  <text x="95" y="1277" class="detail">작업 단계 (Step)</text>
  <polygon points="70,1285 80,1290 70,1295 65,1290" class="decision-bg"/>
  <text x="95" y="1292" class="detail">의사결정</text>
  <rect x="70" y="1305" width="15" height="15" class="success-bg"/>
  <text x="95" y="1317" class="detail">완료/성공</text>

</svg>