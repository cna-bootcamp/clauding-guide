@startuml
!theme mono
title 구독관리 서비스 - 외부 시퀀스 다이어그램

actor Client
participant APIGateway
participant "회원 서비스\n(Authentication)" as AuthService
participant "마이구독 서비스\n(MySubscription)" as MySubService
participant "구독추천 서비스\n(RecommendService)" as RecommendService

' 회원 서비스 호출
Client -> APIGateway: 로그인 요청\nPOST /api/auth/login
APIGateway -> AuthService: 로그인 요청 전달\nPOST /api/auth/login

Client -> APIGateway: 로그아웃 요청\nPOST /api/auth/logout
APIGateway -> AuthService: 로그아웃 요청 전달\nPOST /api/auth/logout

' 마이구독 서비스 호출
Client -> APIGateway: 총 구독료 조회\nGET /api/users/{userId}/subscriptions/total-fee
APIGateway -> MySubService: 총 구독료 조회 요청 전달\nGET /api/users/{userId}/subscriptions/total-fee

Client -> APIGateway: 나의 구독 목록 조회\nGET /api/users/{userId}/subscriptions
APIGateway -> MySubService: 나의 구독 목록 조회 요청 전달\nGET /api/users/{userId}/subscriptions

Client -> APIGateway: 구독 상세 정보 조회\nGET /api/subscriptions/{subscriptionId}
APIGateway -> MySubService: 구독 상세 정보 조회 요청 전달\nGET /api/subscriptions/{subscriptionId}

Client -> APIGateway: 구독하기\nPOST /api/users/{userId}/subscriptions
APIGateway -> MySubService: 구독하기 요청 전달\nPOST /api/users/{userId}/subscriptions

Client -> APIGateway: 구독 취소\nDELETE /api/users/{userId}/subscriptions/{subscriptionId}
APIGateway -> MySubService: 구독 취소 요청 전달\nDELETE /api/users/{userId}/subscriptions/{subscriptionId}

Client -> APIGateway: 카테고리별 구독 서비스 목록 조회\nGET /api/subscriptions?categoryId={categoryId}
APIGateway -> MySubService: 카테고리별 구독 서비스 목록 조회 요청 전달\nGET /api/subscriptions?categoryId={categoryId}

' 구독추천 서비스 호출
Client -> APIGateway: 추천 구독 카테고리 조회\nGET /api/recommend/categories?userId={userId}
APIGateway -> RecommendService: 추천 구독 카테고리 조회 요청 전달\nGET /api/recommend/categories?userId={userId}

' 마이크로서비스 간 통신
MySubService -> RecommendService: 구독 서비스 정보 요청

@enduml


@startuml
!theme mono
title 회원 서비스 - 내부 시퀀스 다이어그램

actor Client
participant "API Gateway" as APIGateway
participant "AuthController" as AuthController
participant "AuthService" as AuthService
participant "MemberRepository" as MemberRepository
participant "JwtTokenProvider" as JwtTokenProvider
database "회원 DB" as MemberDB

' 로그인 흐름
Client -> APIGateway: POST /api/auth/login
activate APIGateway
APIGateway -> AuthController: 로그인 요청
activate AuthController
AuthController -> AuthService: login(loginRequest)
activate AuthService
AuthService -> MemberRepository: findByUserId(userId)
activate MemberRepository
MemberRepository -> MemberDB: 회원 조회
MemberDB --> MemberRepository: 회원 정보 반환
deactivate MemberRepository
MemberRepository --> AuthService: MemberEntity 반환

' 패스워드 검증
AuthService -> AuthService: 패스워드 검증
note right of AuthService
  암호화된 패스워드와
  입력된 패스워드 비교
end note

' 토큰 생성
AuthService -> JwtTokenProvider: createToken(memberEntity, authorities)
activate JwtTokenProvider
JwtTokenProvider -> JwtTokenProvider: Access Token 생성
JwtTokenProvider -> JwtTokenProvider: Refresh Token 생성
JwtTokenProvider --> AuthService: TokenResponse 반환
deactivate JwtTokenProvider

AuthService --> AuthController: TokenResponse 반환
deactivate AuthService
AuthController --> APIGateway: TokenResponse 반환
deactivate AuthController
APIGateway --> Client: 200 OK, TokenResponse
deactivate APIGateway

' 로그아웃 흐름
Client -> APIGateway: POST /api/auth/logout
activate APIGateway
APIGateway -> AuthController: 로그아웃 요청
activate AuthController
AuthController -> AuthService: logout(logoutRequest)
activate AuthService

' 토큰 무효화
AuthService -> JwtTokenProvider: invalidateToken(userId)
activate JwtTokenProvider
JwtTokenProvider --> AuthService: 토큰 무효화 결과
deactivate JwtTokenProvider

AuthService --> AuthController: LogoutResponse 반환
deactivate AuthService
AuthController --> APIGateway: LogoutResponse 반환
deactivate AuthController
APIGateway --> Client: 200 OK, LogoutResponse
deactivate APIGateway

@enduml

@startuml
!theme mono
title 구독추천 서비스 - 내부 시퀀스 다이어그램

actor Client
participant "API Gateway" as APIGateway
participant "RecommendController" as RecommendController
participant "RecommendService" as RecommendService
participant "CategoryRepository" as CategoryRepository
participant "SpendingRepository" as SpendingRepository
participant "SubscriptionRepository" as SubscriptionRepository
database "구독추천 DB" as RecommendDB

' 추천 구독 카테고리 조회
Client -> APIGateway: GET /api/recommend/categories?userId={userId}
activate APIGateway
APIGateway -> RecommendController: 추천 구독 카테고리 요청
activate RecommendController
RecommendController -> RecommendService: getRecommendCategories(userId)
activate RecommendService
RecommendService -> SpendingRepository: findTopCategoryByUserId(userId)
activate SpendingRepository
SpendingRepository -> RecommendDB: 최고 지출 카테고리 조회
RecommendDB --> SpendingRepository: 지출 데이터 반환
deactivate SpendingRepository
SpendingRepository --> RecommendService: 최고 지출 카테고리 반환

RecommendService -> CategoryRepository: findByCategoryMapping(topSpendingCategory)
activate CategoryRepository
CategoryRepository -> RecommendDB: 매핑된 구독 카테고리 조회
RecommendDB --> CategoryRepository: 카테고리 데이터 반환
deactivate CategoryRepository
CategoryRepository --> RecommendService: 매핑된 구독 카테고리 반환

RecommendService -> RecommendService: 추천 카테고리 DTO 변환
note right of RecommendService
  최고 지출 카테고리에 매핑된
  구독 카테고리와 이미지 설정
end note

RecommendService --> RecommendController: RecommendCategoryDTO 반환
deactivate RecommendService
RecommendController --> APIGateway: RecommendCategoryDTO 반환
deactivate RecommendController
APIGateway --> Client: 200 OK, RecommendCategoryDTO
deactivate APIGateway

' 지출 카테고리 및 총 지출액 조회
Client -> APIGateway: GET /api/recommend/expense?userId={userId}
activate APIGateway
APIGateway -> RecommendController: 지출 카테고리 및 총액 요청
activate RecommendController
RecommendController -> RecommendService: getExpenseSummary(userId)
activate RecommendService
RecommendService -> SpendingRepository: findByUserId(userId)
activate SpendingRepository
SpendingRepository -> RecommendDB: 사용자 지출 데이터 조회
RecommendDB --> SpendingRepository: 지출 데이터 목록 반환
deactivate SpendingRepository
SpendingRepository --> RecommendService: 지출 데이터 목록 반환

RecommendService -> RecommendService: 지출 데이터 집계
note right of RecommendService
  - 카테고리별 지출 합산
  - 최고 지출 카테고리 선정
  - 총 지출액 계산
end note

RecommendService --> RecommendController: ExpenseSummaryDTO 반환
deactivate RecommendService
RecommendController --> APIGateway: ExpenseSummaryDTO 반환
deactivate RecommendController
APIGateway --> Client: 200 OK, ExpenseSummaryDTO
deactivate APIGateway

' 구독 카테고리 목록 조회
Client -> APIGateway: GET /api/recommend/categories
activate APIGateway
APIGateway -> RecommendController: 구독 카테고리 목록 요청
activate RecommendController
RecommendController -> RecommendService: getAllCategories()
activate RecommendService
RecommendService -> CategoryRepository: findAll()
activate CategoryRepository
CategoryRepository -> RecommendDB: 전체 카테고리 조회
RecommendDB --> CategoryRepository: 카테고리 목록 반환
deactivate CategoryRepository
CategoryRepository --> RecommendService: 카테고리 목록 반환

RecommendService -> RecommendService: 카테고리 DTO 변환
RecommendService --> RecommendController: CategoryListDTO 목록 반환
deactivate RecommendService
RecommendController --> APIGateway: CategoryListDTO 목록 반환
deactivate RecommendController
APIGateway --> Client: 200 OK, CategoryListDTO 목록
deactivate APIGateway

' 카테고리별 구독서비스 목록 조회
Client -> APIGateway: GET /api/recommend/services?category={category}
activate APIGateway
APIGateway -> RecommendController: 카테고리별 구독서비스 요청
activate RecommendController
RecommendController -> RecommendService: getServicesByCategory(category)
activate RecommendService
RecommendService -> SubscriptionRepository: findByCategory(category)
activate SubscriptionRepository
SubscriptionRepository -> RecommendDB: 카테고리별 구독서비스 조회
RecommendDB --> SubscriptionRepository: 구독서비스 목록 반환
deactivate SubscriptionRepository
SubscriptionRepository --> RecommendService: 구독서비스 목록 반환

RecommendService -> RecommendService: 서비스 DTO 변환
RecommendService --> RecommendController: ServiceListDTO 목록 반환
deactivate RecommendService
RecommendController --> APIGateway: ServiceListDTO 목록 반환
deactivate RecommendController
APIGateway --> Client: 200 OK, ServiceListDTO 목록
deactivate APIGateway

' 구독 서비스 상세 정보 조회
Client -> APIGateway: GET /api/recommend/services/{serviceId}
activate APIGateway
APIGateway -> RecommendController: 구독 서비스 상세 요청
activate RecommendController
RecommendController -> RecommendService: getServiceDetail(serviceId)
activate RecommendService
RecommendService -> SubscriptionRepository: findById(serviceId)
activate SubscriptionRepository
SubscriptionRepository -> RecommendDB: 구독 서비스 상세 조회
RecommendDB --> SubscriptionRepository: 구독 서비스 데이터 반환
deactivate SubscriptionRepository
SubscriptionRepository --> RecommendService: 구독 서비스 데이터 반환

RecommendService -> RecommendService: 서비스 상세 DTO 변환
RecommendService --> RecommendController: ServiceDetailDTO 반환
deactivate RecommendService
RecommendController --> APIGateway: ServiceDetailDTO 반환
deactivate RecommendController
APIGateway --> Client: 200 OK, ServiceDetailDTO
deactivate APIGateway

@enduml

@startuml
!theme mono
title 구독추천 서비스 - 추천 구독 카테고리 내부 시퀀스 다이어그램

actor Client
participant "API Gateway" as APIGateway
participant "RecommendController" as RecommendController
participant "RecommendService" as RecommendService
participant "SpendingRepository" as SpendingRepository
participant "CategoryRepository" as CategoryRepository
database "구독추천 DB" as RecommendDB

' 추천 구독 카테고리 조회
Client -> APIGateway: GET /api/recommend/categories?userId={userId}
activate APIGateway
APIGateway -> RecommendController: 추천 구독 카테고리 요청
activate RecommendController
RecommendController -> RecommendService: getRecommendCategories(userId)
activate RecommendService

' 지출 데이터 기반 최고 지출 카테고리 조회
RecommendService -> SpendingRepository: findTopCategoryByUserId(userId)
activate SpendingRepository
SpendingRepository -> RecommendDB: 최고 지출 카테고리 조회
RecommendDB --> SpendingRepository: 지출 데이터 반환
SpendingRepository --> RecommendService: 최고 지출 카테고리 반환
deactivate SpendingRepository

' 추천 구독 카테고리 매핑
RecommendService -> CategoryRepository: findByCategoryMapping(topSpendingCategory)
activate CategoryRepository
CategoryRepository -> RecommendDB: 매핑된 구독 카테고리 조회
RecommendDB --> CategoryRepository: 카테고리 데이터 반환
CategoryRepository --> RecommendService: 매핑된 구독 카테고리 반환
deactivate CategoryRepository

' 응답 데이터 생성
RecommendService -> RecommendService: 추천 카테고리 DTO 변환
note right of RecommendService
  최고 지출 카테고리에 매핑된
  구독 카테고리와 이미지 설정
  baseDate 값 포함
end note

RecommendService --> RecommendController: RecommendCategoryDTO 반환
deactivate RecommendService
RecommendController --> APIGateway: RecommendCategoryDTO 반환
deactivate RecommendController
APIGateway --> Client: 200 OK, RecommendCategoryDTO
deactivate APIGateway

@enduml

